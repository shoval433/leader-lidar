pipeline{

    // triggers{
    //     pollSCM '* * * * *'
    // }

    options {
        timestamps()
        gitLabConnection('my-repo') 
      
    }
    
    tools {
        maven 'my-work-maven'
        jdk 'java-8-work'
    }
    environment{
        def ver_telemetry=""
        def ver_simulator=""
        def Fcommit=""
    }
    agent any
    stages{
        stage("chekout"){
            steps{
                echo "========executing chekout========"
                deleteDir()
                checkout scm
            }
        }
        stage("is Feature"){
             when{
                expression{
                    return GIT_BRANCH.contains('feature/') 
                }
            }
            steps{
                script{
                    
                    sh "mvn package"
                    Fcommit=sh (script: "git show -s --format=%s",
                    returnStdout: true).trim()
                }
            }
        }
        stage("is main/master/release"){
             when{
                anyOf {
                    branch "main"
                    branch "master"
                    branch "release/*"
                }
            } 
            steps{
                script{
                    sh "mvn package"
                }
            }
            
        }
        stage("calc latest tag for feature"){
            when{
             anyOf {
                    branch "feature/*"
                }
            }
            steps{
                script{
                    sh "mkdir a && cd a && jf rt dl libs-release-local/com/lidar/telemetry/ && ls"
                     echo "------------------------------------------"
                    sh "cd a/com/lidar/telemetry/ && ls "
                    echo "------------------------------------------"
                    def path_telemetry= sh (script: "echo 'a/com/lidar/telemetry/'",
                    returnStdout: true).trim()
                    echo "${path_telemetry}"
                    ver_telemetry=sh (script: "bash where_ver.sh ${path_telemetry}",
                    returnStdout: true).trim()
                    echo "${ver_telemetry}"
                    


                    sh "mkdir b && cd b && jf rt dl libs-release-local/com/lidar/simulator/ && ls"
                    echo "------------------------------------------"
                    sh "cd b/com/lidar/simulator/ && ls "
                    echo "------------------------------------------"
                    def path_simulator= sh (script: "echo 'b/com/lidar/simulator/'",
                    returnStdout: true).trim()
                    echo "${path_simulator}"
                    ver_simulator=sh (script: "bash where_ver.sh ${path_simulator}",
                    returnStdout: true).trim()
                    echo "${ver_simulator}"
                    
                }
            }
            
        }
        stage("calc latest tag for release/"){
            when{
             anyOf {
                    branch "release/*"
                }
            }
            steps{
                script{
                    Ver_Br=sh (script: "echo $GIT_BRANCH | cut -d '/' -f2",
                    returnStdout: true).trim()

                    sh "mkdir a && cd a && jf rt dl libs-release-local/com/lidar/telemetry/ && ls"
                     echo "------------------------------------------"
                    sh "cd a/com/lidar/telemetry/ && ls "
                    echo "------------------------------------------"
                    def path_telemetry= sh (script: "echo 'a/com/lidar/telemetry/'",
                    returnStdout: true).trim()
                    echo "${path_telemetry}"
                    ver_telemetry=sh (script: "bash where_ver2.sh ${path_telemetry} ${Ver_Br}",
                    returnStdout: true).trim()
                    echo "${ver_telemetry}"
                    


                    sh "mkdir b && cd b && jf rt dl libs-release-local/com/lidar/simulator/ && ls"
                    echo "------------------------------------------"
                    sh "cd b/com/lidar/simulator/ && ls "
                    echo "------------------------------------------"
                    def path_simulator= sh (script: "echo 'b/com/lidar/simulator/'",
                    returnStdout: true).trim()
                    echo "${path_simulator}"
                    ver_simulator=sh (script: "bash where_ver2.sh ${path_simulator} ${Ver_Br}",
                    returnStdout: true).trim()
                    echo "${ver_simulator}"
                    
                }
            }
            
        }

        stage("Testing"){
             when{
                expression{
                    return GIT_BRANCH.contains('feature/') && Fcommit.contains("#e2e") || GIT_BRANCH.contains('release/') 
                }
                
            } 
            steps{
                script{
                    try{
                    ver_telemetry1=sh (script: "echo ${ver_telemetry}",
                    returnStdout: true).trim()
                    echo "${ver_telemetry1}"

                    ver_simulator1=sh (script: "echo ${ver_simulator}",
                    returnStdout: true).trim()
                    echo "${ver_simulator1}"

                    withCredentials([usernamePassword(credentialsId: 'artifactory-login', passwordVariable: 'the_pass', usernameVariable: 'the_use')]){
                    sh "cd target && curl -u ${the_use}:${the_pass} -XGET http://43.0.20.203:8082/artifactory/libs-release-local/com/lidar/telemetry/${ver_telemetry1}/telemetry-${ver_telemetry1}.jar --output telemetry-${ver_telemetry1}.jar "
                    sh "cd target && curl -u ${the_use}:${the_pass} -XGET http://43.0.20.203:8082/artifactory/libs-release-local/com/lidar/simulator/${ver_simulator1}/simulator-${ver_simulator1}.jar --output simulator-${ver_simulator1}.jar "
                    }
                    sh "cd target && ls "
                    
                    thefile=sh (script: "cd target && ls | grep -i analytics",
                    returnStdout: true).trim()
                    echo "------------------------------------------------------------"
                    sh "cd target && java -cp simulator-${ver_simulator1}.jar:telemetry-${ver_telemetry1}.jar:${thefile} com.lidar.simulation.Simulator"
                    }
                    catch(err){
                        withCredentials([usernamePassword(credentialsId: 'artifactory-login', passwordVariable: 'the_pass', usernameVariable: 'the_use')]){
                        sh "cd target && curl -u ${the_use}:${the_pass} -XGET http://43.0.20.203:8082/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/simulator-99-20230110.082510-1.jar --output simulator-99-20230110.082510-1.jar "
                        sh "cd target && curl -u ${the_use}:${the_pass} -XGET http://43.0.20.203:8082/artifactory/libs-snapshot-local/com/lidar/telemetry/99-SNAPSHOT/telemetry-99-20230110.091943-2.jar --output telemetry-99-20230110.091943-2.jar "
                        }
                        thefile=sh (script: "cd target && ls | grep -i telemetry",
                        returnStdout: true).trim()
                        echo "------------------------------------------------------------"
                        sh "cd target && java -cp simulator-99-20230110.082510-1.jar:${thefile}:telemetry-99-20230110.091943-2.jar com.lidar.simulation.Simulator"
                    }
                
                }
            }
            
        }
       
        stage("is release"){
             when{
                anyOf {
                    branch "release/*"
                }
                
            } 
            steps{
                script{
                    echo "yes"
                    
                }
            }
            
        }


        stage("release bulid img"){
            when{
                anyOf {
                    branch "release/*"
                }
            }
            steps{
                echo "========executing bulid img========"
                script{

                    Ver_Br=sh (script: "echo $GIT_BRANCH | cut -d '/' -f2",
                    returnStdout: true).trim()

                    echo "${Ver_Br}"

                    Ver_Calc=sh (script: "bash calc.sh ${Ver_Br}",
                    returnStdout: true).trim()
                    echo "${Ver_Calc}"
                    sh "mvn versions:set -DnewVersion=${Ver_Calc}"
                  
                    sh "mvn dependency:list" 

                    configFileProvider([configFile(fileId: 'my_settings.xml', variable: 'set')]) {
                    sh "mvn -s ${set} versions:set-property -Dproperty=telemetry.version -DnewVersion=${ver_telemetry1}"
                    sh "mvn -s ${set} deploy "
                    sh "mvn dependency:list"
                    }
                  
                    withCredentials([gitUsernamePassword(credentialsId: '2053d2c3-e0ab-4686-b031-9a1970106e8d', gitToolName: 'Default')]){
                        sh "git tag $Ver_Calc"
                        sh "git push origin $Ver_Calc"
                    }
                }
            }
        }
    }
    
    
    post{
        success{
            script{
                echo "yes"
               
            }
        }
        failure {
            
            script{
                echo "no"
             }

            
        }
    }
}